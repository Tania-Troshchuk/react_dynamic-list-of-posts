{"version":3,"sources":["api/request.ts","api/posts.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["BASE_URL","request","url","options","a","fetch","then","response","ok","Error","status","statusText","json","result","Response","Loader","className","PostsList","selectedUserId","selectedPostId","setSelectedPostId","useState","userPosts","setUserPosts","isLoadingPost","setIsLoadingPost","useEffect","loadPosts","length","map","post","userId","title","id","type","onClick","onSelectingPost","getPostComments","postId","deleteComment","commentId","method","addComment","name","email","body","headers","JSON","stringify","NewCommentForm","setPostComments","setIsLoadingComments","setName","setEmail","newComment","setNewComment","handleSubmit","event","preventDefault","onSubmit","placeholder","value","required","onChange","target","PostDetails","postDetails","setPostDetails","postComments","showComments","setShowComments","isLoadingComments","isLoadingDetails","setIsLoadingDetails","loadPostDetails","comments","buttonTitle","removeComment","comment","App","users","setUsers","setSelectedUserId","loadUsers","user","ReactDOM","render","document","getElementById"],"mappings":"uUAEaA,G,kBAAW,qCAEjB,SAAeC,EAAtB,oC,4CAAO,WAAuBC,EAAaC,GAApC,eAAAC,EAAA,+EAEkBC,MAAM,GAAD,OAAIL,GAAJ,OAAeE,GAAOC,GAC7CG,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,iBAAoBF,EAASG,OAA7B,cAAyCH,EAASI,aAG1D,OAAOJ,EAASK,UARjB,cAEGC,EAFH,yBAWIA,GAXJ,yDAaI,CACLC,SAAU,QACVL,MAAM,sBAAD,eAfJ,0D,4BCAA,I,OCDMM,EAAmB,kBAC9B,qBAAKC,UAAU,SAAf,SACE,qBAAKA,UAAU,uBCUNC,EAA6B,SAAC,GAIpC,IAHLC,EAGI,EAHJA,eACAC,EAEI,EAFJA,eACAC,EACI,EADJA,kBAEA,EAAkCC,mBAAwB,MAA1D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAqBA,OAfAC,qBAAU,WACR,IAAMC,EAAS,uCAAG,4BAAAvB,EAAA,yDAChBqB,GAAiB,GAEiB,IAAnBP,EAHC,gCFvBbjB,EAAQ,UEuBK,0DFnBbA,EAAQ,iBAAD,OEwBaiB,IALP,2BAGVL,EAHU,KAOhBU,EAAaV,GACbY,GAAiB,GARD,4CAAH,qDAWfE,MACC,CAACT,IAEII,IAAcE,EAElB,sBAAKR,UAAU,YAAf,UACE,wCAECM,EAAUM,OAEP,oBAAIZ,UAAU,kBAAkB,UAAQ,cAAxC,SACGM,EAAUO,KAAI,SAAAC,GAAI,OACjB,qBAAId,UAAU,kBAAd,UACE,gCACE,6CAAcc,EAAKC,OAAnB,SACCD,EAAKE,SAGNb,IAAmBW,EAAKG,GAEtB,wBACEC,KAAK,SACLlB,UAAU,2BACVmB,QAAS,YAvCP,SAACL,GACvBV,EAAkBU,EAAKG,IAuCDG,CAAgBN,IAJpB,kBAUA,wBACEI,KAAK,SACLlB,UAAU,2BACVmB,QAAS,WACPf,EAAkB,OAJtB,qBAlB+BU,EAAKG,SAiC9C,wEAON,cAAC,EAAD,KCvFOI,G,MAAkB,SAACC,GAC9B,OAAOrC,EAAQ,oBAAD,OAAqBqC,MAGxBC,EAAgB,SAACC,GAC5B,OAAOvC,EAAQ,aAAD,OAAcuC,GAAa,CACvCC,OAAQ,YAICC,EAAa,SACxBJ,EAAgBK,EAAcC,EAAeC,GAE7C,OAAO5C,EAAQ,YAAa,CAC1BwC,OAAQ,OACRK,QAAS,CACP,eAAgB,mCAElBD,KAAME,KAAKC,UAAU,CACnBV,SACAK,OACAC,QACAC,YCbOI,EAAkC,SAAC,GAIzC,IAHL9B,EAGI,EAHJA,eACA+B,EAEI,EAFJA,gBACAC,EACI,EADJA,qBAEA,EAAwB9B,mBAAS,IAAjC,mBAAOsB,EAAP,KAAaS,EAAb,KACA,EAA0B/B,mBAAS,IAAnC,mBAAOuB,EAAP,KAAcS,EAAd,KACA,EAAoChC,mBAAS,IAA7C,mBAAOiC,EAAP,KAAmBC,EAAnB,KAQMC,EAAY,uCAAG,WAAOC,GAAP,eAAArD,EAAA,6DACnBqD,EAAMC,iBAENP,GAAqB,GAHF,SAKbT,EAAWvB,EAAgBwB,EAAMC,EAAOU,GAL3B,uBAOEjB,EAAgBlB,GAPlB,OAObN,EAPa,OASnBqC,EAAgBrC,GAEhBsC,GAAqB,GAhBrBC,EAAQ,IACRC,EAAS,IACTE,EAAc,IAGK,4CAAH,sDAelB,OACE,uBAAMvC,UAAU,iBAAiB2C,SAAUH,EAA3C,UACE,qBAAKxC,UAAU,aAAf,SACE,uBACEkB,KAAK,OACLS,KAAK,OACLiB,YAAY,YACZ5C,UAAU,wBACV6C,MAAOlB,EACPmB,UAAQ,EACRC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBZ,EAAQY,EAAOH,YAI7C,qBAAK7C,UAAU,aAAf,SACE,uBACEkB,KAAK,QACLS,KAAK,QACLiB,YAAY,aACZ5C,UAAU,wBACV6C,MAAOjB,EACPkB,UAAQ,EACRC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBX,EAASW,EAAOH,YAI9C,qBAAK7C,UAAU,aAAf,SACE,0BACE2B,KAAK,OACLiB,YAAY,oBACZ5C,UAAU,wBACV6C,MAAOP,EACPQ,UAAQ,EACRC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBT,EAAcS,EAAOH,YAInD,wBACE3B,KAAK,SACLlB,UAAU,uCAFZ,+BCjEOiD,G,MAA+B,SAAC,GAEtC,IADL9C,EACI,EADJA,eAEA,EAAsCE,mBAAsB,MAA5D,mBAAO6C,EAAP,KAAoBC,EAApB,KACA,EAAwC9C,mBAA2B,MAAnE,mBAAO+C,EAAP,KAAqBlB,EAArB,KACA,EAAwC7B,oBAAS,GAAjD,mBAAOgD,EAAP,KAAqBC,EAArB,KACA,EAAkDjD,oBAAS,GAA3D,mBAAOkD,EAAP,KAA0BpB,EAA1B,KACA,EAAgD9B,oBAAS,GAAzD,mBAAOmD,EAAP,KAAyBC,EAAzB,KAEA/C,qBAAU,WACR,IAAMgD,EAAe,uCAAG,8BAAAtE,EAAA,6DACtBqE,GAAoB,GADE,SLZnBxE,EAAQ,UAAD,OKeqBkB,IAHT,cAGhBW,EAHgB,gBAICO,EAAgBlB,GAJjB,OAIhBwD,EAJgB,OAMtBR,EAAerC,GACfoB,EAAgByB,GAChBF,GAAoB,GARE,4CAAH,qDAWrBC,MACC,CAACvD,IAEJ,IAAMyD,EAAcP,EAAY,sBACpBD,QADoB,IACpBA,OADoB,EACpBA,EAAcxC,OADM,mCAEpBwC,QAFoB,IAEpBA,OAFoB,EAEpBA,EAAcxC,OAFM,aAI1BiD,EAAa,uCAAG,WAAOrC,GAAP,eAAApC,EAAA,6DACpB+C,GAAqB,GADD,SAEdZ,EAAcC,GAFA,uBAICH,EAAgBlB,GAJjB,OAIdN,EAJc,OAMpBqC,EAAgBrC,GAChBsC,GAAqB,GAPD,2CAAH,sDAUnB,OAAQqB,EACH,cAAC,EAAD,IAED,sBAAKxD,UAAU,cAAf,UACE,+CAEA,yBAASA,UAAU,oBAAnB,SACE,mCAAIkD,QAAJ,IAAIA,OAAJ,EAAIA,EAAarB,SAGlBuB,IACCG,EACE,cAAC,EAAD,IAEA,0BAASvD,UAAU,wBAAnB,UACE,wBACEkB,KAAK,SACLlB,UAAU,SACVmB,QAAS,kBAAMmC,GAAiBD,IAHlC,SAKGO,KAGDP,GACA,oBAAIrD,UAAU,oBAAoB,UAAQ,cAA1C,SACGoD,EAAavC,KAAI,SAAAiD,GAAO,OACvB,qBACE9D,UAAU,yBADZ,UAIE,wBACEkB,KAAK,SACLlB,UAAU,oCACVmB,QAAS,kBAAM0C,EAAcC,EAAQ7C,KAHvC,eAOA,4BAAI6C,EAAQjC,SATPiC,EAAQ7C,aAkB3B,kCACE,qBAAKjB,UAAU,4BAAf,SACE,cAAC,EAAD,CACEG,eAAgBA,EAChB+B,gBAAiBA,EACjBC,qBAAsBA,aC7BrB4B,EAhEO,WACpB,MAA0B1D,mBAAwB,MAAlD,mBAAO2D,EAAP,KAAcC,EAAd,KACA,EAA4C5D,mBAAS,GAArD,mBAAOH,EAAP,KAAuBgE,EAAvB,KACA,EAA4C7D,mBAAwB,MAApE,mBAAOF,EAAP,KAAuBC,EAAvB,KAEAM,qBAAU,WACR,IAAMyD,EAAS,uCAAG,4BAAA/E,EAAA,sECZbH,EAAQ,UDYK,OACVY,EADU,OAGhBoE,EAASpE,GAHO,2CAAH,qDAMfsE,MACC,IAOH,OACE,sBAAKnE,UAAU,MAAf,UACE,wBAAQA,UAAU,cAAlB,SACE,wDAGE,yBACEA,UAAU,qBACV6C,MAAO3C,EACP6C,SAdS,SAACN,GAClByB,GAAmBzB,EAAMO,OAAOH,OAChCzC,EAAkB,OASZ,UAKE,wBAAQyC,MAAM,IAAd,uBALF,OAMGmB,QANH,IAMGA,OANH,EAMGA,EAAOnD,KAAI,SAAAuD,GAAI,OACd,wBAAQvB,MAAOuB,EAAKnD,GAApB,SACGmD,EAAKzC,KACFyC,EAAKzC,KADR,4BAEwByC,EAAKnD,KAHHmD,EAAKnD,eAU1C,uBAAMjB,UAAU,YAAhB,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEE,eAAgBA,EAChBC,eAAgBA,EAChBC,kBAAmBA,MAItBD,GACC,qBAAKH,UAAU,eAAf,SACE,cAAC,EAAD,CACEG,eAAgBA,aE9D9BkE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.eb0121d3.chunk.js","sourcesContent":["import { Options } from '../types/Options';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function request(url: string, options?: Options) {\n  try {\n    const result = await fetch(`${BASE_URL}${url}`, options)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`Error: ${response.status} - ${response.statusText}`);\n        }\n\n        return response.json();\n      });\n\n    return result;\n  } catch (error) {\n    return {\n      Response: 'False',\n      Error: `Unexpected error - ${error}`,\n    };\n  }\n}\n","import { Post } from '../types/Post';\n\nimport { request } from './request';\n\nexport const getAllPosts = (): Promise<Post[]> => {\n  return request('/posts');\n};\n\nexport const getUserPosts = (userId: number): Promise<Post[]> => {\n  return request(`/posts?userId=${userId}`);\n};\n\nexport const getPostById = (postId: number): Promise<Post> => {\n  return request(`/posts/${postId}`);\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport './PostsList.scss';\n\nimport { Post } from '../../types/Post';\n\nimport { getAllPosts, getUserPosts } from '../../api/posts';\n\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedUserId: number,\n  selectedPostId: number | null,\n  setSelectedPostId: React.Dispatch<React.SetStateAction<number | null>>,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUserId,\n  selectedPostId,\n  setSelectedPostId,\n}) => {\n  const [userPosts, setUserPosts] = useState<Post[] | null>(null);\n  const [isLoadingPost, setIsLoadingPost] = useState(false);\n\n  const onSelectingPost = (post: Post) => {\n    setSelectedPostId(post.id);\n  };\n\n  useEffect(() => {\n    const loadPosts = async () => {\n      setIsLoadingPost(true);\n\n      const result = selectedUserId === 0\n        ? await getAllPosts()\n        : await getUserPosts(selectedUserId);\n\n      setUserPosts(result);\n      setIsLoadingPost(false);\n    };\n\n    loadPosts();\n  }, [selectedUserId]);\n\n  return (userPosts && !isLoadingPost\n    ? (\n      <div className=\"PostsList\">\n        <h2>Posts:</h2>\n\n        {userPosts.length\n          ? (\n            <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n              {userPosts.map(post => (\n                <li className=\"PostsList__item\" key={post.id}>\n                  <div>\n                    <b>{`[User #${post.userId}]: `}</b>\n                    {post.title}\n                  </div>\n\n                  {(selectedPostId !== post.id)\n                    ? (\n                      <button\n                        type=\"button\"\n                        className=\"PostsList__button button\"\n                        onClick={() => {\n                          onSelectingPost(post);\n                        }}\n                      >\n                        Open\n                      </button>\n                    ) : (\n                      <button\n                        type=\"button\"\n                        className=\"PostsList__button button\"\n                        onClick={() => {\n                          setSelectedPostId(null);\n                        }}\n                      >\n                        Close\n                      </button>\n                    )}\n                </li>\n              ))}\n            </ul>\n          )\n          : (\n            <div>\n              The selected user has no posts yet\n            </div>\n          )}\n      </div>\n    )\n    : (\n      <Loader />\n    )\n  );\n};\n","import { Comment } from '../types/Comment';\n\nimport { request } from './request';\n\nexport const getPostComments = (postId: number): Promise<Comment[]> => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number): Promise<Comment[]> => {\n  return request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const addComment = (\n  postId: number, name: string, email: string, body: string,\n): Promise<Comment[]> => {\n  return request('/comments', {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\nimport { Comment } from '../../types/Comment';\n\nimport { addComment, getPostComments } from '../../api/comments';\n\ntype Props = {\n  selectedPostId: number,\n  setPostComments: React.Dispatch<React.SetStateAction<Comment[] | null>>,\n  setIsLoadingComments: React.Dispatch<React.SetStateAction<boolean>>,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  setPostComments,\n  setIsLoadingComments,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [newComment, setNewComment] = useState('');\n\n  const resetForm = () => {\n    setName('');\n    setEmail('');\n    setNewComment('');\n  };\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setIsLoadingComments(true);\n\n    await addComment(selectedPostId, name, email, newComment);\n\n    const result = await getPostComments(selectedPostId);\n\n    setPostComments(result);\n\n    setIsLoadingComments(false);\n    resetForm();\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          required\n          onChange={({ target }) => setName(target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          required\n          onChange={({ target }) => setEmail(target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={newComment}\n          required\n          onChange={({ target }) => setNewComment(target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\n\nimport { getPostComments, deleteComment } from '../../api/comments';\nimport { getPostById } from '../../api/posts';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedPostId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPostId,\n}) => {\n  const [postDetails, setPostDetails] = useState<Post | null>(null);\n  const [postComments, setPostComments] = useState<Comment[] | null>(null);\n  const [showComments, setShowComments] = useState(false);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [isLoadingDetails, setIsLoadingDetails] = useState(false);\n\n  useEffect(() => {\n    const loadPostDetails = async () => {\n      setIsLoadingDetails(true);\n\n      const post = await getPostById(selectedPostId);\n      const comments = await getPostComments(selectedPostId);\n\n      setPostDetails(post);\n      setPostComments(comments);\n      setIsLoadingDetails(false);\n    };\n\n    loadPostDetails();\n  }, [selectedPostId]);\n\n  const buttonTitle = showComments\n    ? `Show ${postComments?.length} comments`\n    : `Hide ${postComments?.length} comments`;\n\n  const removeComment = async (commentId: number) => {\n    setIsLoadingComments(true);\n    await deleteComment(commentId);\n\n    const result = await getPostComments(selectedPostId);\n\n    setPostComments(result);\n    setIsLoadingComments(false);\n  };\n\n  return (isLoadingDetails\n    ? (<Loader />)\n    : (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n\n        <section className=\"PostDetails__post\">\n          <p>{postDetails?.body}</p>\n        </section>\n\n        {postComments && (\n          isLoadingComments ? (\n            <Loader />\n          ) : (\n            <section className=\"PostDetails__comments\">\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setShowComments(!showComments)}\n              >\n                {buttonTitle}\n              </button>\n\n              {!showComments && (\n                <ul className=\"PostDetails__list\" data-cy=\"postDetails\">\n                  {postComments.map(comment => (\n                    <li\n                      className=\"PostDetails__list-item\"\n                      key={comment.id}\n                    >\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => removeComment(comment.id)}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </section>\n          )\n        )}\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm\n              selectedPostId={selectedPostId}\n              setPostComments={setPostComments}\n              setIsLoadingComments={setIsLoadingComments}\n            />\n          </div>\n        </section>\n      </div>\n    )\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { User } from './types/User';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport { getAllUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n\n  useEffect(() => {\n    const loadUsers = async () => {\n      const result = await getAllUsers();\n\n      setUsers(result);\n    };\n\n    loadUsers();\n  }, []);\n\n  const selectUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n    setSelectedPostId(null);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={selectUser}\n          >\n            <option value=\"0\">All users</option>\n            {users?.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name\n                  ? user.name\n                  : `Incognito user: id${user.id}`}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n          />\n        </div>\n\n        {selectedPostId && (\n          <div className=\"App__content\">\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { User } from '../types/User';\n\nimport { request } from './request';\n\nexport const getAllUsers = (): Promise<User[]> => {\n  return request('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}