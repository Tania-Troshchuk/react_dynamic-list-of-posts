{"version":3,"sources":["components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/request.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","api/posts.ts","api/userPosts.ts","index.tsx"],"names":["Loader","className","PostsList","loading","posts","selectedPost","setSelectedPost","onSelectingPost","length","map","post","userId","title","id","type","onClick","BASE_URL","request","url","options","a","fetch","then","response","ok","Error","status","statusText","json","result","Response","getPostComments","postId","deleteComment","commentId","method","addComment","name","email","body","headers","JSON","stringify","NewCommentForm","setPostComments","setIsLoadingComments","useState","setName","setEmail","newComment","setNewComment","handleSubmit","event","preventDefault","onSubmit","placeholder","value","required","onChange","target","PostDetails","postComments","showComments","setShowComments","isLoadingComments","buttonTitle","removeComment","comment","App","allUsers","setAllUsers","selectedUserId","setSelectedUserId","userPosts","setUserPosts","isLoadingPost","setIsLoadingPost","isLoadingDetails","setIsLoadingDetails","useEffect","loadAllUsers","loadPosts","handleSelectingPost","e","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7696fd8f.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport './PostsList.scss';\n\nimport { Post } from '../../types/Post';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  loading: boolean,\n  posts: Post[],\n  selectedPost: Post | null,\n  setSelectedPost: (selectedPost: Post | null) => void,\n  onSelectingPost: (selectedPost: Post) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  loading,\n  posts,\n  selectedPost,\n  setSelectedPost,\n  onSelectingPost,\n}) => {\n  return (loading\n    ? (<Loader />)\n    : (\n      <div className=\"PostsList\">\n        <h2>Posts:</h2>\n\n        {posts.length ? (\n          <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n            {posts.map(post => (\n              <li className=\"PostsList__item\" key={post.id}>\n                <div>\n                  <b>{`[User #${post.userId}]: `}</b>\n                  {post.title}\n                </div>\n\n                {(selectedPost?.id !== post.id)\n                  ? (\n                    <button\n                      type=\"button\"\n                      className=\"PostsList__button button\"\n                      onClick={() => {\n                        onSelectingPost(post);\n                      }}\n                    >\n                      Open\n                    </button>\n                  ) : (\n                    <button\n                      type=\"button\"\n                      className=\"PostsList__button button\"\n                      onClick={() => {\n                        setSelectedPost(null);\n                      }}\n                    >\n                      Close\n                    </button>\n                  )}\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <div>\n            The selected user has no posts yet\n          </div>\n        )}\n      </div>\n    )\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function request(url: string, options?: {}) {\n  try {\n    const result = await fetch(`${BASE_URL}${url}`, options)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`Error: ${response.status} - ${response.statusText}`);\n        }\n\n        return response.json();\n      });\n\n    return result;\n  } catch (error) {\n    return {\n      Response: 'False',\n      Error: `Unexpected error - ${error}`,\n    };\n  }\n}\n","import { Comment } from '../types/Comment';\n\nimport { request } from './request';\n\nexport const getPostComments = (postId: number): Promise<Comment[]> => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number): Promise<Comment[]> => {\n  return request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const addComment = (\n  postId: number, name: string, email: string, body: string,\n): Promise<Comment[]> => {\n  return request('/comments', {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\n\nimport { addComment, getPostComments } from '../../api/comments';\n\ntype Props = {\n  selectedPost: Post,\n  setPostComments: (comments: Comment[] | null) => void,\n  setIsLoadingComments: (status: boolean) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  setPostComments,\n  setIsLoadingComments,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [newComment, setNewComment] = useState('');\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setIsLoadingComments(true);\n\n    await addComment(selectedPost.id, name, email, newComment);\n\n    const result = await getPostComments(selectedPost.id);\n\n    setPostComments(result);\n    setIsLoadingComments(false);\n    setName('');\n    setEmail('');\n    setNewComment('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          required\n          onChange={({ target }) => setName(target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          required\n          onChange={({ target }) => setEmail(target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={newComment}\n          required\n          onChange={({ target }) => setNewComment(target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\n\nimport { getPostComments, deleteComment } from '../../api/comments';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedPost: Post,\n  postComments: Comment[] | null,\n  setPostComments: (comments: Comment[] | null) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  postComments,\n  setPostComments,\n}) => {\n  const [showComments, setShowComments] = useState(false);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n\n  const buttonTitle = showComments\n    ? `Show ${postComments?.length} comments`\n    : `Hide ${postComments?.length} comments`;\n\n  const removeComment = async (commentId: number) => {\n    setIsLoadingComments(true);\n    await deleteComment(commentId);\n\n    const result = await getPostComments(selectedPost.id);\n\n    setPostComments(result);\n    setIsLoadingComments(false);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost.body}</p>\n      </section>\n\n      {postComments && (\n        isLoadingComments ? (\n          <Loader />\n        ) : (\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setShowComments(!showComments)}\n            >\n              {buttonTitle}\n            </button>\n\n            {!showComments && (\n              <ul className=\"PostDetails__list\" data-cy=\"postDetails\">\n                {postComments.map(comment => (\n                  <li\n                    className=\"PostDetails__list-item\"\n                    key={comment.id}\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => removeComment(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n        )\n\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPost={selectedPost}\n            setPostComments={setPostComments}\n            setIsLoadingComments={setIsLoadingComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { Comment } from './types/Comment';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport { getAllUsers } from './api/users';\nimport { getAllPosts } from './api/posts';\nimport { getUserPosts } from './api/userPosts';\nimport { getPostComments } from './api/comments';\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const [allUsers, setAllUsers] = useState<User[] | null>(null);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [userPosts, setUserPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [postComments, setPostComments] = useState<Comment[] | null>(null);\n  const [isLoadingPost, setIsLoadingPost] = useState(false);\n  const [isLoadingDetails, setIsLoadingDetails] = useState(false);\n\n  useEffect(() => {\n    const loadAllUsers = async () => {\n      const result = await getAllUsers();\n\n      setAllUsers(result);\n    };\n\n    loadAllUsers();\n  }, []);\n\n  useEffect(() => {\n    const loadPosts = async () => {\n      setIsLoadingPost(true);\n\n      const result = selectedUserId === 0\n        ? await getAllPosts()\n        : await getUserPosts(selectedUserId);\n\n      setUserPosts(result);\n      setIsLoadingPost(false);\n    };\n\n    loadPosts();\n  }, [selectedUserId]);\n\n  const handleSelectingPost = async (post: Post) => {\n    setIsLoadingDetails(true);\n    setSelectedPost(post);\n\n    const result = await getPostComments(post.id);\n\n    setPostComments(result);\n    setIsLoadingDetails(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={(e) => {\n              setSelectedUserId(+e.target.value);\n              setSelectedPost(null);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {allUsers?.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name ? user.name : `Incognito user: id${user.id}`}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {userPosts && (\n            <PostsList\n              loading={isLoadingPost}\n              posts={userPosts}\n              selectedPost={selectedPost}\n              setSelectedPost={setSelectedPost}\n              onSelectingPost={handleSelectingPost}\n            />\n          )}\n        </div>\n\n        {selectedPost && (\n          <div className=\"App__content\">\n            {isLoadingDetails\n              ? (<Loader />)\n              : (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  postComments={postComments}\n                  setPostComments={setPostComments}\n                />\n              )}\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { User } from '../types/User';\n\nimport { request } from './request';\n\nexport const getAllUsers = (): Promise<User[]> => {\n  return request('/users');\n};\n","import { Post } from '../types/Post';\n\nimport { request } from './request';\n\nexport const getAllPosts = (): Promise<Post[]> => {\n  return request('/posts');\n};\n","import { Post } from '../types/Post';\n\nimport { request } from './request';\n\nexport const getUserPosts = (userId: number): Promise<Post[]> => {\n  return request(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}